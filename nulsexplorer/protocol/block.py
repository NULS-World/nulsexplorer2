import struct
from nulsexplorer.protocol.data import (BaseNulsData, NulsDigestData,
                                        write_with_length, read_by_length,
                                        writeUint48, readUint48, hash_twice)
from nulsexplorer.protocol.transaction import Transaction

class P2PKHScriptSig(BaseNulsData):
    DEFAULT_SERIALIZE_LENGTH = 110

    def __init__(self, data=None):
        self.public_key = None

        if data is not None:
            self.parse(data)

    def parse(self, buffer, cursor=0):
        pos, self.public_key = read_by_length(buffer, cursor=cursor)
        cursor += pos
        self.sign_alg_type = buffer[cursor]
        cursor += 1
        pos, self.sign_bytes = read_by_length(buffer, cursor=cursor)
        cursor += pos

    @property
    def size(self):
        nsize = len(self.public_key) + len(self.sign_bytes) + 3
        return nsize

    def serialize(self):
        return write_with_length(self.public_key) + bytes([self.sign_alg_type ])\
               + write_with_length(self.sign_bytes)

class BlockHeader(BaseNulsData):
    def __init__(self, data=None):
        self.preHash = None
        self.merkleHash = None
        self.time = None
        self.height = None
        self.txCount = None
        self.extend = None
        self.scriptSig = None
        self.raw_data = None

        # extend data
        self.roundIndex = None
        self.consensusMemberCount = None
        self.roundStartTime = None
        self.packingIndexOfRound = None
        self.mainVersion = None
        self.currentVersion = None
        self.percent = None
        self.delay = None
        self.stateRoot = None

        if data is not None:
            self.parse(data)

    async def prepare_hash(self, tx_count=None):
        self.hash_bytes = hash_twice(await self.serialize(for_hash=True,
                                                          tx_count=tx_count))
        self.hash = NulsDigestData(data=self.hash_bytes, alg_type=0)

    async def parse(self, buffer, cursor=0):
        self.preHash = NulsDigestData(data=buffer)
        cursor += self.preHash.size
        self.merkleHash = NulsDigestData(data=buffer[cursor:])
        cursor += self.merkleHash.size
        self.time = readUint48(buffer, cursor)
        cursor += 6
        self.height, self.txCount = struct.unpack("II", buffer[cursor:cursor+8])
        cursor += 8

        pos, self.extend = read_by_length(buffer, cursor, check_size=True)
        cursor += pos
        #await self.prepare_hash()
        await self.parse_extend(self.extend)

        self.scriptSig = P2PKHScriptSig(data=buffer[cursor:])
        cursor += self.scriptSig.size

        self.raw_data = buffer[:cursor]
        return cursor

    async def parse_extend(self, extend):
        cursor = 0
        self.roundIndex = struct.unpack("I", extend[cursor:cursor+4])[0]
        cursor += 4
        self.consensusMemberCount = struct.unpack("H", extend[cursor:cursor+2])[0]
        cursor += 2
        self.roundStartTime = readUint48(extend, cursor)
        cursor += 6
        self.packingIndexOfRound = struct.unpack("H", extend[cursor:cursor+2])[0]
        cursor += 2
        if len(extend) > cursor:
            self.mainVersion = struct.unpack("i", extend[cursor:cursor+4])[0]
            cursor += 4
            self.currentVersion = struct.unpack("i", extend[cursor:cursor+4])[0]
            cursor += 4
            self.percent = struct.unpack("H", extend[cursor:cursor+2])[0]
            cursor += 2
            self.delay = struct.unpack("I", extend[cursor:cursor+4])[0]
            cursor += 4
            pos, self.stateRoot = read_by_length(extend, cursor, check_size=True)
            cursor += pos

    async def serialize(self, for_hash=False, tx_count=None):
        if tx_count is None:
            tx_count = self.txCount

        out = bytes()
        out += self._prepare(self.preHash)
        out += self._prepare(self.merkleHash)
        out += writeUint48(self.time)
        out += struct.pack("II", self.height, tx_count)
        out += write_with_length(self.extend)
        if for_hash:
            out += self._prepare(None)
        else:
            out += self._prepare(self.scriptSig)

        return out

    def __str__(self):
        return  "%s%s" % (
            self.preHash,
            self.merkleHash
        )

class Block(BaseNulsData):
    def __init__(self, data=None, hash_switch_height=None):
        self.header = None
        self.transactions = None
        self.hash_switch_height = hash_switch_height

        #if data is not None:
        #    self.parse(data)

    async def parse(self, buffer):
        self.size = len(buffer)
        self.header = BlockHeader()
        cursor = await self.header.parse(buffer)

        #hash_varint = ((self.hash_switch_height is None) or
        #               (0 <= self.header.height < int(self.hash_switch_height)))
        #print(self.header.mainVersion, self.header.currentVersion)
        hash_varint = (self.header.currentVersion is None) or (self.header.currentVersion < 2)

        self.transactions = list()
        for ntx in range(self.header.txCount):
            tx = Transaction(height=self.header.height,
                             hash_varint=hash_varint)
            cursor = await tx.parse(buffer, cursor)
            self.transactions.append(tx)

        # we need to rehash without the tx type 103, as they are virtual.
        tx_count = len([tx for tx in self.transactions if tx.type != 103])
        await self.header.prepare_hash(tx_count=tx_count)

        for transaction in self.transactions:
            await transaction.run_processor()

    def __str__(self):
        return  "%s" % (
            self.header
        )

    async def to_dict(self):
        return {
            'hash': str(self.header.hash),
            'preHash': str(self.header.preHash),
            'merkleHash': str(self.header.merkleHash),
            'time': self.header.time,
            'height': self.header.height,
            'txCount': self.header.txCount,
            'extend': self.header.extend.hex(),
            'roundIndex': self.header.roundIndex,
            'consensusMemberCount': self.header.consensusMemberCount,
            'roundStartTime': self.header.roundStartTime,
            'packingIndexOfRound': self.header.packingIndexOfRound,
            'mainVersion': self.header.mainVersion,
            'currentVersion': self.header.currentVersion,
            'percent': self.header.percent,
            'delay': self.header.delay,
            'stateRoot': self.header.stateRoot,
            'size': self.size,
            'reward': sum([t.coin_data.get_output_sum() for t in self.transactions if t.type == 1]),
            'fee': sum([t.coin_data.get_fee() for t in self.transactions if t.type != 1]),
            'txList': [await t.to_dict() for t in self.transactions]
        }

    async def serialize(self):
        output = b""
        output += await self.header.serialize()
        for tx in self.transactions:
            output += await tx.serialize()
        return output

def read_block_header(bytes):
    pass

if __name__ == "__main__":
    import base64
    #v = b'ACCAI2bW5L0nf8oQriPGi/YrItgV3xglKYlYmBqHv9jlbgAglHk5VUr605JRswl/3osRlWzWZAAzwg6K7Wqh7eKh0UIAeuWAZAHO1QAAAgAAAA5SVggAFgCgHuKAZAEWACED+t+fCvlmYmJvoJYIlBlkX6/MjUpf7eVz8H+1I4yP2a0ARjBEAiBtkeqYlC7djU+HhZuoRZbzkmVpC6MOSh3douGlEPY0vwIgeTq8klF+cH8kRj+VWsVRjglS2GAfaED/ZxnyUapDVuMBAAB65YBkAQD/////AAEXAQAB3X5dBTFUIjmFGy/M+Bp/fFp6k9P8jOEKAAAAALbZAAAAAAAHAAB65YBkAQABAQABd8BiHOOpmAoKXAS4+8tipgjjt/3/////AA=='
    #v = b"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"

    #v = 	"ACAVIzw+vBzaE40/Xs2CYLPDyT09KrS8m04mbO0aZT5emgAggpPvLGXwdNiI3RdfpYR0Zit3zUkqJ1yG85uWBIiOwKmwZ9aIZAGjFQAAAgAAAA6UKAAAEQDwktSIZAEMACED7rW+euWD5jYtYROAl+SIkKQwBV1YSrrrvL2cCK4Svu0ARzBFAiEAxqQ1pC9cLfojdSfHsKFl7KAA+BblikKqodKaY21C21ECIBcZkYe65cpmPh/OENVjjCAIyNpAmSlTV46X9lqFtSDFAQCwZ9aIZAEA/////wAYFwQjAU3e6d/9xHd8WL4AhXZ8Vu42NtsNISuqAgAAAACLGQAAAAAXBCMBAncF3JiaEcbe+rWnccRiKiUBSkA1+C8AAAAAAIsZAAAAABcEIwGGUnkaO5g35TEqf2ZIVb1jU1qAVZQwowAAAAAAixkAAAAAFwQjAWPIdDbXfoiciK9zmpKJUmM7nxALTfhcAAAAAACLGQAAAAAXBCMBuXRcGc2fV7y4m4DViu9Y2YOELluO2isAAAAAAIsZAAAAABcEIwFEdMCJTuaRvCyyIZzMtXdL9Qu7tSy6yQAAAAAAixkAAAAAFwQjAZ96PLnZC8k6+63jOZ24OQc0BgI77egRAAAAAACLGQAAAAAXBCMB5IR5PtWN3XchUa9tLU+7TZuIkVGLiBIAAAAAAIsZAAAAABcEIwE8RnGPyutO2VXHEzySrHZnjwc/NSNk4gEAAAAAixkAAAAAFwQjAZ5ZieJo/Znlnwzb6XwXm6kEapSFPWqvAAAAAACLGQAAAAAXBCMBfoR5tLci0x05dMvqQier9HTGA0myYD0AAAAAAIsZAAAAABcEIwFzvNnMErRZHeS8RhHmySRxUaUrao7aKwAAAAAAixkAAAAAFwQjAa39z17Hk/3j16jEgePy/D6RTIMz9RsjAAAAAACLGQAAAAAXBCMBLPv5RBZ3/Oo68xPamcAbSF4Rfp3tNBwAAAAAAIsZAAAAABcEIwEHU8emb9R8BOyiJxs/Rk/2n8eER96fNAAAAAAAixkAAAAAFwQjAUZN1qSrd5aEeRfBcDLNizCbpryfn4oRAAAAAACLGQAAAAAXBCMBGF5CPr398jH3zjsDgnSdVTx225r2DzoAAAAAAIsZAAAAABcEIwEqP1J+/JmfS9mHw3++OfHN22GgoWxqaAAAAAAAixkAAAAAFwQjAW3uN+G99nQcmN/sReatIfWvJhgjILVXAAAAAACLGQAAAAAXBCMBgAtUoVhtE5Plh2wu8tH383KNZjm3+DEHAAAAAIsZAAAAABcEIwESc70dv7bJwu2k4b9BXxNHqjthhMs1BwEAAAAAixkAAAAAFwQjAQGAi9n8pNp5d7+D4GkaSX50+JA1YYm2AQAAAACLGQAAAAAXBCMBONdU8CrdAGq+nDwgShzeiqAunQJWAicAAAAAAIsZAAAAABcEIwGv76JtvFoEqmcsar3dXjet0X19h8DHRQAAAAAAixkAAAAAAAIAvUDWiGQBCkVSQzIwLW51bHP/////ASMAILVSm7iYX4Xfv9kZXiqJZiAsqJ36Tjaok6YAxA/8qIcYAZkYLiUSzwEAAAAAAAAAAhcEIwGqabjd09Yn7SnzMZzKYmsPPoATlCCAoxsAAAAAAAAAAAAAFwQjAcflMK/sCG/PSkdwhJgGKRVObGtH2RGJCRLPAQAAAAAAAABqIQLWMrHN+YchZZIYLMW9gsEz/E2WpkRFrz/jUx+xLbeU6gBGMEQCIFYlc6EUP6vZc7umF/wou2+idIez8q7tmubvJPW81B0EAiBoSPUUFcUQxEupfb1p7Cm6F+F8Fj0j3zp/kYkDWOP2SQ=="
    v = ""
    #v = "0020e65cabff7df627ca67dbedadadb9e7dc2e255d2eac39937ef99268f4cc2124fd0020e77c7281101eb6d1772473abcbbf63ca2bcae06cf6dff1d121aaeca5959ed955b0a4b8f0640185230000030000000ea9bf020009007008b8f06401040021036d43ac8aa21c68d2b361a80a5decc476a1a44c6e6f2f6a05d0773c352bba628b00473045022100edda5982bc3534445b11a196f8dda6260005ad32e067d818645d1804e80f04c60220323bbf42a4733fee0c626ffdd7acb347135676facc293ac8eb6a503ee705c5420100b0a4b8f0640100ffffffff000217010001408448dc2838e95ea3975a798f92f4fc56de9de1af50cb09000000006d2700000000170100013dc8996151be6b655728fb24340b29609d08f9785f2e2d02000000006d2700000000000700b0a4b8f064010001010001d0813702ff344957f1d09c06a7de6aba6ac64b84ffffffff00080010a3b8f0640100010001d0813702ff344957f1d09c06a7de6aba6ac64b84030004230020b13e77a0dfdbf29673b25202875cce1a2da84489718f4fba62e2b756061070c10000204aa9d1010000ffffffffffff230020839da03925dc42994df6bf3dc30138774a37f03dfd547430633659f213e9224800c0dd3aa9d1010000ffffffffffff2300200835f654475f81a7ec8d81e6c62f58bc159a0dd2229610927bbc64c0df5bde7d0000a0724e18090000ffffffffffff2300201be7913ce819c00428f0ab7a77425a8186f91d15e6b247dd957ac8838ef43e30000040e59c30120000ffffffffffff0417010001d0813702ff344957f1d09c06a7de6aba6ac64b8400204aa9d10100001033b625660117010001829627633c4a5959d88f3b628b9284799ad906ddc0dd3aa9d101000000000000000017010001eb88b7930a206b1cc6b91e9574cac73c0d3b29e500a0724e18090000000000000000170100011e32b7c345ce97977c77a8f7710256e2edea2fa50040e59c3012000000000000000000"
    #print(base64.b64decode(v).hex())
    async def debug_block(val):
        from datetime import datetime
        import pprint
        val = base64.b64decode(val)
        block = Block()
        t1 = datetime.now()
        await block.parse(val)
        t2 = datetime.now()
        print(t2-t1)
        #block = Block(bytes.fromhex(v))
        # print (block.header.preHash,
        #        block.header.merkleHash,
        #        block.header.hash)
        # print (block.header.time,
        #        block.header.height,
        #        block.header.txCount)
        ser = await block.serialize()
        t3 = datetime.now()
        print(t3-t2)
        ser = await block.to_dict()
        t4 = datetime.now()
        pprint.pprint(ser)
        print(t4-t3)

    import asyncio

    loop = asyncio.get_event_loop()
    loop.run_until_complete(debug_block(v))
    loop.close()
